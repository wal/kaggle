train <- read.csv('data/train.csv')
train <- read.csv('../data/train.csv')
# https://www.kaggle.com/c/titanic
train <- read.csv('../data/train.csv')
train <- read.csv('data/train.csv')
# https://www.kaggle.com/c/titanic
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
head(train)
head(train)
str(train)
str(train)
str(train)
table(train$Survived)
prop.table(table(train$Survived))
prop.table(table(train$Survived)) * 100
round(prop.table(table(train$Survived)) * 100, 0)
table(test$Survived)
test$Survived <- 0
table(test$Survived)
library(tidyverse)
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
write.csv(submit, 'results/everyone_dies.csv', row.names = FALSE)
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
write.csv(submit, 'results/everyone_dies.csv', row.names = FALSE)
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)))
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 0) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
submit <- test %>% mutate(Survived = ifelse(sex == 'male', 0, 1))
submit <- test %>% mutate(Survived = ifelse(Sex == 'male', 0, 1))
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
# Submission 1 - Everyone Dies
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
write.csv(submit, 'results/submit_1-everyone_dies.csv', row.names = FALSE)
# Submission 2 - Relationship between Sex and survival rate
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
submit <- test %>%
mutate(Survived = ifelse(Sex == 'male', 0, 1))
write.cav(submit %>% select(PassengerId, Survived), 'results/submit_2-men_die.csv', row.names = FALSE)
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_2-men_die.csv', row.names = FALSE)
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
# Submission 1 - Everyone Dies
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
write.csv(submit, 'results/submit_1-everyone_dies.csv', row.names = FALSE)
# Submission 2 - Relationship between Sex and survival rate
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
submit <- test %>%
mutate(Survived = ifelse(Sex == 'male', 0, 1))
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_2-men_die.csv', row.names = FALSE)
summary(train$Age)
train$Child <- train$Age < 18
str(train)
train %>% filter(Child == TRUE)
prop.table(table(train$Child, train$Sex))
prop.table(table(train$Child, train$Sex)) * 100
prop.table(table(train$Child, train$Sex), 1) * 100
aggregate(Survived ~ Child + Sex, data = train, FUN=sum)
train %>% aggregate(Survived ~ Child + Sex, FUN=sum)
aggregate(train, Survived ~ Child + Sex, FUN=sum)
aggregate(data = train, Survived ~ Child + Sex, FUN=sum)
?aggregate
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)}) * 100
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {sum(x) / length(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x, na.rm = TRUE)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x, na.rm = FALSE)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
summary(train$Fare)
train <- train %>% mutate(Fare2 = fare_category(Fare))
fare_category <- function(fare) {
if(fare > 30) {
return('30+')
} else if(fare > 20) {
return('20-30')
} else if(fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>% mutate(Fare2 = fare_category(Fare))
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train
summary(train$Fare2)
train$Fare2 <- as.factor(train$Fare2)
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
aggregate(Survived ~ Fare2 + pclass + Sex, data = train, FUN=mean(x))
aggregate(Survived ~ Fare2 + pClass + Sex, data = train, FUN=mean(x))
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=mean(x))
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=mean)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=function(x) {sum(x) / length(x)})
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=mean)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=mean)
survived <- function(sex, pclass, fare) {
if(sex == 'female') {
if(pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submit <- train %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_3-sex-fare-class.csv', row.names = FALSE)
submit <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_3-sex-fare-class.csv', row.names = FALSE)
table(submit$Survived)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
round(prop.table(table(train$Survived)) * 100, 0)
library(rpart)
?rpart
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
plot(fit)
text(fit)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages('rattle')
install.packages("RGtk2", depen=T, type="source")
install.packages("RGtk2")
install.packages("RGtk2", dependencies = T, type = 'mac.binary.mavericks')
install.packages("RGtk2")
install.packages("rattle", dependencies = T)
library(rattle)
install.packages('rattle')
install.packages("rattle", dependencies = T)
library(RGtk2)
install.packages("RGtk2", depen=T)
library(RGtk2)
library(gWidgets)
options(guiToolkit="RGtk2")
win <- gwindow("test")
glabel("test label", container = win)
library(rattle)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# https://www.kaggle.com/c/titanic
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
# Submission 1 - Everyone Dies
submit <- test %>%
mutate(Survived = 0) %>%
select(PassengerId, Survived)
table(submit$Survived)
write.csv(submit, 'results/submit_1-everyone_dies.csv', row.names = FALSE)
# Submission 2 - Impact of Sex on survival
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
submit <- test %>%
mutate(Survived = ifelse(Sex == 'male', 0, 1))
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_2-men_die.csv', row.names = FALSE)
# Submission 3 - Impact of Age on survival
summary(train$Age)
train$Child <- train$Age < 18
str(train)
aggregate(data = train, Survived ~ Child + Sex, FUN=sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
# Submission #4 - Imact of Fare and pClass
summary(train$Fare)
fare_category <- function(fare) {
if(fare > 30) {
return('30+')
} else if(fare > 20) {
return('20-30')
} else if(fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN=mean)
survived <- function(sex, pclass, fare) {
if(sex == 'female') {
if(pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submit <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
write.csv(submit %>% select(PassengerId, Survived), 'results/submit_3-sex-fare-class.csv', row.names = FALSE)
# Submission 4 - Decision Tree
# A glass-box model, after the model has found the patterns in the data you can see exactly what
# decisions will be made for unseen data that you want to predict
round(prop.table(table(train$Survived)) * 100, 0)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
plot(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages('rattle')
install.packages("/Users/wal/RGtk2_2.20.33.tar.gz")
install.packages(/Users/wal/RGtk2_2.20.33.tar.gz)
install.packages(rattle, dependencies=c("Depends", "Suggests"))
install.packages(rattle, dependencies=c("Depends", "Suggests"))
install.packages("rattle", dependencies=c("Depends", "Suggests"))
fancyRpartPlot(fit)
library(rattle)
install.packages('rattle')
install.packages('cairoDevice')
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
install.packages("https://cran.r-project.org/bin/windows/contrib/3.3/RGtk2_2.20.31.zip", repos=NULL)
install.packages('versions')
install.packages('rattle')
install.packages('cairo')
install.packages('Cairo')
R.version
installed.packages()
R.home()
