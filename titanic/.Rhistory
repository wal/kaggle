sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
?sample
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = FALSE)
summary(combined$Age))
summary(combined$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combined[!is.na(combined$Age),],
method="anova")
combined$Age[is.na(combined$Age)] <- predict(Agefit, combined[is.na(combined$Age),])
summary(combined)
summary(combined)
which(combined$Embarked == '')
combined$Embarked[c(62,830)] = "S"
combined$Embarked <- factor(combined$Embarked)
which(is.na(combined$Fare))
combined$Fare[1044] <- median(combined$Fare, na.rm=TRUE)
summary(combined)
str(combined)
combined$FamilyID2 <- combined$FamilyID
combined$FamilyID2 <- as.character(combined$FamilyID2)
combined$FamilyID2[combined$FamilySize <= 3] <- 'Small'
combined$FamilyID2 <- factor(combined$FamilyID2)
summary(combined)
summary(combined)
install.packages('randomForest')
library(randomForest)
set.seed(415)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
library(randomForest)
set.seed(415)
train <- combined[1:891,]
test <- combined[892:1309,]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(
submit %>% select(PassengerId, Survived),
'results/submit_6-random_forest.csv',
row.names = FALSE
)
install.packages('party')
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID,
data = train,
controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(
submit %>% select(PassengerId, Survived),
'results/submit_6-random_forest.csv',
row.names = FALSE
)
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(
submit %>% select(PassengerId, Survived),
'results/submit_7-conditional_inference_tree.csv',
row.names = FALSE
)
library(tidyverse)
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
str(data)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
str(data)
?paste
create_submission_file <- function(dataset, filename) {
write.csv(dataset %>% select(PassengerId, survived),
paste('../attempts/', filename, sep = ''), row.names = FALSE)
}
submission <- test %>%
mutate(Survived = 0)
create_submission_file(submission, 'attempt_1-everyone_dies.csv')
submission <- test %>% mutate(Survived = 0)
create_submission_file(submission, 'attempt_1-everyone_dies.csv')
create_submission_file <- function(dataset, filename) {
write.csv(dataset %>% select(PassengerId, Survived),
paste('../attempts/', filename, sep = ''), row.names = FALSE)
}
create_submission_file <- function(dataset, filename) {
write.csv(dataset %>% select(PassengerId, Survived),
paste('../attempts/', filename, sep = ''), row.names = FALSE)
}
submission <- test %>% mutate(Survived = 0)
create_submission_file(submission, 'attempt_1-everyone_dies.csv')
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
submission <- test %>% mutate(Survived = ifelse(Sex == 'male', 0, 1))
create_submission_file(submission, 'attempt_2-all-men-die.csv')
summary(train$Age)
train$Child <- train$Age < 18
summary(train$Age)
summary(train$Sex)
train$Child <- train$Age < 18
str(train)
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x) })
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x)})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {mean(x) * 100})
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {round(mean(x) * 100)})
summary(train$Age)
ggplot(train, aes(Age)) + geom_histogram()
ggplot(train, aes(Age)) + geom_histogram(bins = 10)
ggplot(train, aes(Age)) + geom_histogram(bins = 15)
ggplot(train, aes(Age)) + geom_histogram(bins = 20)
ggplot(train, aes(Age)) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age), group = Sex) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age, group = Sex)) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age, color = Sex)) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age, color = Sex)) + geom_histogram(bins = 20)
ggplot(train, aes(Age, fill = Sex)) + geom_histogram(bins = 20)
ggplot(train, aes(Age, color = Sex)) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age, fill = Sex)) + geom_freqpoly(bins = 20)
ggplot(train, aes(Age, color = Sex)) + geom_freqpoly(bins = 20)
summary(train$Age)
ggplot(train, aes(Age, color = Sex)) + geom_freqpoly(bins = 20)
aggregate(data = train, Survived ~ Child)
aggregate(data = train, Survived ~ Child, fun = sum)
aggregate(data = train, Survived ~ Child, FUN = sum)
table(train$Child, train$Survived)
?aggregate
aggregate(data = train, ~ Survived, FUN = sum)
aggregate(data = train, . ~ Survived, FUN = sum)
aggregate(data = train, Survived ~ Sex)
aggregate(data = train, Survived ~ Sex, FUN = sum)
aggregate(data = train, Survived ~ Sex, sum)
summary(train$Age)
ggplot(train, aes(Age, color = Sex)) + geom_freqpoly(bins = 20)
summary(train$Sex)
train$Child <- train$Age < 18
table(train$Child, train$Survived)
aggregate(data = train, Survived ~ Child, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {round(mean(x) * 100)})
aggregate(data = train, Survived ~ Sex, sum)
aggregate(data = train, Survived ~ Sex, length)
aggregate(data = train, Survived ~ Sex, length)
aggregate(data = train, Survived ~ Child, FUN = length)
aggregate(data = train, Survived ~ Child, FUN = length)
aggregate(data = train, Survived ~ Child, FUN = sum)
aggregate(data = train, Survived ~ Child, FUN = length)
aggregate(data = train, Survived ~ Child, FUN = length)
aggregate(data = train, Survived ~ Child, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {round(mean(x) * 100)})
summary(train$Fare)
fare_category <- function(fare) {
if (fare > 30) {
return('30+')
} else if (fare > 20) {
return('20-30')
} else if (fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass, fare) {
if (sex == 'female') {
if (pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
summary(train$Fare)
fare_category <- function(fare) {
if (fare > 30) {
return('30+')
} else if (fare > 20) {
return('20-30')
} else if (fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass, fare) {
if (sex == 'female') {
if (pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
submission
test
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
summary(train$Fare)
fare_category <- function(fare) {
if (fare > 30) {
return('30+')
} else if (fare > 20) {
return('20-30')
} else if (fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass, fare) {
if (sex == 'female') {
if (pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
summary(train$Fare)
fare_category <- function(fare) {
if (fare > 30) {
return('30+')
} else if (fare > 20) {
return('20-30')
} else if (fare > 10) {
return('10-20')
} else {
return('<10')
}
}
train <- train %>%
rowwise() %>%
mutate(Fare2 = fare_category(Fare))
train$Fare2 <- as.factor(train$Fare2)
summary(train$Fare2)
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass, fare) {
if (sex == 'female') {
if (pclass == 3 && fare >= 20) {
return(1)
} else {
return(0)
}
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass, Fare))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass) {
if ((sex == 'female') && (pclass == 3)) {
return(1)
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = mean)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = sum)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = length)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
create_submission_file <- function(dataset, filename) {
write.csv(dataset %>% select(PassengerId, Survived),
paste('../attempts/', filename, sep = ''), row.names = FALSE)
}
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
str(data)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
str(train)
table(train$Survived)
round(prop.table(table(train$Survived)) * 100, 0)
str(data)
submission <- test %>% mutate(Survived = 0)
create_submission_file(submission, 'attempt_1-everyone_dies.csv')
summary(train$Sex)
prop.table(table(train$Sex, train$Survived)) * 100
prop.table(table(train$Sex, train$Survived), 1) * 100
prop.table(table(train$Sex, train$Survived), 2) * 100
aggregate(data = train, Survived ~ Sex, length)
submission <- test %>% mutate(Survived = ifelse(Sex == 'male', 0, 1))
create_submission_file(submission, 'attempt_2-all-men-die.csv')
summary(train$Pclass)
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = length)
summary(train$Pclass)
aggregate(Survived ~ Pclass + Sex, data = train, FUN = length)
survived <- function(sex, pclass) {
if ((sex == 'female') && (pclass == 1)) {
return(1)
} else {
return(0)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
aggregate(Survived ~ Pclass + Sex, data = train, FUN = sum)
aggregate(Survived ~ Pclass + Sex, data = train, FUN = mean)
summary(train$Pclass)
aggregate(Survived ~ Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass) {
if (sex == 'female') {
return(pclass != 3)
} else {
return(Pclass == 1)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass))
test
summary(train$Pclass)
aggregate(Survived ~ Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass) {
if (sex == 'female') {
return(pclass != 3)
} else {
return(pclass == 1)
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
summary(train$Pclass)
aggregate(Survived ~ Pclass + Sex, data = train, FUN = mean)
survived <- function(sex, pclass) {
if (sex == 'female') {
return(ifelse(pclass != 3, 1, 0))
} else {
return(ifelse(pclass == 1, 1, 0))
}
}
submission <- test %>%
rowwise() %>%
mutate(Survived = survived(Sex, Pclass))
create_submission_file(submission, 'attempt_3-sex-class-fare.csv')
submission
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fit <-
rpart(
Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = 'class'
)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submission <-
data.frame(PassengerId = test$PassengerId, Survived = Prediction)
create_submission_file(submission, 'attempt_4-decision_tree.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
create_submission_file <- function(dataset, filename) {
write.csv(dataset %>% select(PassengerId, Survived),
paste('../attempts/', filename, sep = ''), row.names = FALSE)
}
#train <- read.csv('../data/train.csv')
#test <- read.csv('../data/test.csv')
test$Survived <- NA
combined <- rbind(train, test)
combined$Name <- as.character(combined$Name)
combined$Name[1]
# Refactor with stringr/tidyr
combined$Title <- sapply(combined$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combined$Title <- sub(' ', '', combined$Title)
table(combined$Title)
combined$Title[combined$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combined$Title[combined$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combined$Title[combined$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combined$Title <- factor(combined$Title)
combined$FamilySize <- combined$SibSp + combined$Parch + 1
combined$Surname <- sapply(combined$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combined$FamilyID <- paste(as.character(combined$FamilySize), combined$Surname, sep="")
combined$FamilyID[combined$FamilySize <= 2] <- 'Small'
table(combined$FamilyID)
famIDs <- data.frame(table(combined$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combined$FamilyID[combined$FamilyID %in% famIDs$Var1] <- 'Small'
combined$FamilyID <- factor(combined$FamilyID)
train <- combined[1:891,]
test <- combined[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train,
method="class")
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submission <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
create_submission_file(submission, 'attempt_5-decision_tree-feature-engineering.csv')
# Bagging
sample(1:10, replace = TRUE)
sample(1:10, replace = FALSE)
summary(combined$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combined[!is.na(combined$Age),],
method="anova")
combined$Age[is.na(combined$Age)] <- predict(Agefit, combined[is.na(combined$Age),])
summary(combined)
which(combined$Embarked == '')
combined$Embarked[c(62,830)] = "S"
combined$Embarked <- factor(combined$Embarked)
which(is.na(combined$Fare))
combined$Fare[1044] <- median(combined$Fare, na.rm=TRUE)
str(combined)
combined$FamilyID2 <- combined$FamilyID
combined$FamilyID2 <- as.character(combined$FamilyID2)
combined$FamilyID2[combined$FamilySize <= 3] <- 'Small'
combined$FamilyID2 <- factor(combined$FamilyID2)
summary(combined)
library(randomForest)
set.seed(415)
train <- combined[1:891,]
test <- combined[892:1309,]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID2,
data=train,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submission <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
create_submission_file(submission, 'attempt_6-random-forrest.csv')
